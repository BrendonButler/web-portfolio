name: Deploy

on:
  push:
    branches: [develop]
  workflow_dispatch:

run-name: Deploying to CloudFront

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    name: Build and Test
    uses: ./.github/workflows/build-and-test.yaml
    with:
      stage: true
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_SESSION_NAME: ${{ secrets.AWS_ROLE_SESSION_NAME }}
      AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
      AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

  promote-approval:
    if: |
      contains(fromJson('["skipped", "success"]'), needs.deploy.result) &&
      !contains(needs.*.result, 'failure')
    needs: [build-and-test, deploy]
    runs-on: ubuntu-latest
    environment:
      name: promote-approval
    steps:
      - name: Awaiting Approval
        run: echo "Please approve the deployment by commenting 'approve' on this issue."

  promote:
    timeout-minutes: 10
    if: |
      always() &&
      contains(fromJson('["skipped", "success"]'), needs.promote-approval.result) &&
      !contains(needs.*.result, 'failure')
    needs: [build-and-test, deploy, promote-approval]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}

      - name: Promote Staging to Production
        run: |
          # Get the current ETag values
          STAGING_ETAG=$(aws cloudfront get-distribution --id ${{ secrets.AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID }} --query 'ETag' --output text)
          PRIMARY_ETAG=$(aws cloudfront get-distribution --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --query 'ETag' --output text)

          # Update the primary distribution with the staging configuration
          aws cloudfront update-distribution-with-staging-config \
            --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --staging-distribution-id ${{ secrets.AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID }} \
            --if-match "$PRIMARY_ETAG, $STAGING_ETAG"
