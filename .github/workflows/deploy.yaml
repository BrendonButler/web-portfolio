name: Deploy

on:
  push:
    branches: [develop]
  workflow_dispatch:

run-name: Deploying to CloudFront

permissions:
  id-token: write
  contents: read

jobs:
  build-test-and-stage:
    name: Build, Test and Stage
    uses: ./.github/workflows/build-and-test.yaml
    with:
      stage: true
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_SESSION_NAME: ${{ secrets.AWS_ROLE_SESSION_NAME }}
      AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
      AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID }}

  promote-approval:
    if: |
      contains(fromJson('["skipped", "success"]'), needs.build-test-and-stage.result) &&
      !contains(needs.*.result, 'failure')
    needs: [build-test-and-stage]
    runs-on: ubuntu-latest
    environment:
      name: promote-approval
    steps:
      - name: Awaiting Approval
        run: echo "Please approve the deployment by commenting 'approve' on this issue."

  promote:
    timeout-minutes: 30
    if: |
      always() &&
      contains(fromJson('["skipped", "success"]'), needs.promote-approval.result) &&
      !contains(needs.*.result, 'failure')
    needs: [build-test-and-stage, promote-approval]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check Staging Distribution Status
        id: check-status
        run: |
          retry_command() {
            local max_attempts=3
            local wait_time=60
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              if "$@"; then
                return 0
              else
                echo "Attempt $attempt failed. Retrying in $wait_time seconds..."
                sleep $wait_time
                attempt=$((attempt + 1))
              fi
            done

            echo "All $max_attempts attempts failed."
            return 1
          }

          check_staging_status() {
            STATUS=$(aws cloudfront get-distribution --id ${{ secrets.AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID }} --query 'Distribution.Status' --output text)
            if [ "$STATUS" = "Deployed" ]; then
              return 0
            else
              return 1
            fi
          }

          echo "Checking staging distribution status..."
          if retry_command check_staging_status; then
            echo "Staging distribution is ready."
          else
            echo "Staging distribution is not in a deployable state after multiple checks"
            exit 1
          fi

      - name: Promote Staging to Production
        if: steps.check-status.outcome == 'success'
        run: |
          retry_command() {
            local max_attempts=3
            local wait_time=60
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              if "$@"; then
                return 0
              else
                echo "Attempt $attempt failed. Retrying in $wait_time seconds..."
                sleep $wait_time
                attempt=$((attempt + 1))
              fi
            done

            echo "All $max_attempts attempts failed."
            return 1
          }

          promote_to_production() {
            # Get the current ETag values
            STAGING_ETAG=$(aws cloudfront get-distribution --id ${{ secrets.AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID }} --query 'ETag' --output text)
            PRIMARY_ETAG=$(aws cloudfront get-distribution --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --query 'ETag' --output text)

            # Update the primary distribution with the staging configuration
            aws cloudfront update-distribution-with-staging-config \
              --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
              --staging-distribution-id ${{ secrets.AWS_CLOUDFRONT_STAGE_DISTRIBUTION_ID }} \
              --if-match "$PRIMARY_ETAG, $STAGING_ETAG"
          }

          echo "Promoting staging distribution to production..."
          if retry_command promote_to_production; then
            echo "Promotion to production successful"
          else
            echo "Promotion to production failed after multiple attempts"
            exit 1
          fi
